# Убран устаревший атрибут version
services:
  db:
    image: postgres:16.9-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432" # Внешний порт:Внутренний порт
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  user-service:
    build: ./user-service
    restart: always
    environment:
      PORT: ${USER_SERVICE_INTERNAL_PORT}
      DB_HOST: db
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: fitness_users_db
      DB_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${USER_SERVICE_INTERNAL_PORT}:${USER_SERVICE_INTERNAL_PORT}"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy # Add RabbitMQ dependency
    networks:
      - app-network

  workout-exercise-service:
    build: ./workout-exercise-service
    restart: always
    environment:
      PORT: ${WORKOUT_EXERCISE_SERVICE_INTERNAL_PORT}
      DB_HOST: db
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: fitness_workouts_db
      DB_PORT: 5432
    ports:
      - "${WORKOUT_EXERCISE_SERVICE_INTERNAL_PORT}:${WORKOUT_EXERCISE_SERVICE_INTERNAL_PORT}"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy # Add RabbitMQ dependency
    networks:
      - app-network

  plan-progress-service:
    build:
      context: ./plan-progress-service
      dockerfile: Dockerfile
    restart: always
    environment:
      PORT: ${PLAN_PROGRESS_SERVICE_INTERNAL_PORT}
      DB_HOST: db
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: fitness_plans_progress_db
      DB_PORT: 5432
      USER_SERVICE_URL: http://user-service:${USER_SERVICE_INTERNAL_PORT}
      WORKOUT_EXERCISE_SERVICE_URL: http://workout-exercise-service:${WORKOUT_EXERCISE_SERVICE_INTERNAL_PORT}
      # Используем имя сервиса RabbitMQ для подключения
      RABBITMQ_URL: amqp://user:password@rabbitmq:5672
    ports:
      - "${PLAN_PROGRESS_SERVICE_INTERNAL_PORT}:${PLAN_PROGRESS_SERVICE_INTERNAL_PORT}"
    depends_on:
      db:
        condition: service_healthy
      user-service:
        condition: service_started
      workout-exercise-service:
        condition: service_started
      rabbitmq: # Добавлено ожидание RabbitMQ
        condition: service_healthy # Используем healthcheck RabbitMQ
    networks:
      - app-network

  blog-service:
    build: ./blog-service
    restart: always
    environment:
      PORT: ${BLOG_SERVICE_INTERNAL_PORT}
      DB_HOST: db
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: fitness_blog_db
      DB_PORT: 5432
    ports:
      - "${BLOG_SERVICE_INTERNAL_PORT}:${BLOG_SERVICE_INTERNAL_PORT}"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq: # Add RabbitMQ dependency
        condition: service_healthy
    networks:
      - app-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    restart: always
    environment:
      PORT: ${API_GATEWAY_INTERNAL_PORT}
      USER_SERVICE_URL: http://user-service:${USER_SERVICE_INTERNAL_PORT}
      WORKOUT_EXERCISE_SERVICE_URL: http://workout-exercise-service:${WORKOUT_EXERCISE_SERVICE_INTERNAL_PORT}
      PLAN_PROGRESS_SERVICE_URL: http://plan-progress-service:${PLAN_PROGRESS_SERVICE_INTERNAL_PORT}
      BLOG_SERVICE_URL: http://blog-service:${BLOG_SERVICE_INTERNAL_PORT}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_INTERNAL_PORT}" # Внешний порт:Внутренний порт
    depends_on:
      user-service:
        condition: service_started
      workout-exercise-service:
        condition: service_started
      plan-progress-service:
        condition: service_started
      blog-service:
        condition: service_started
      rabbitmq: # Добавлено ожидание RabbitMQ для API Gateway, если он с ним как-то взаимодействует
        condition: service_healthy
    networks:
      - app-network

  # Сервис RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # Порт для AMQP
      - "15672:15672" # Порт для веб-интерфейса (Management UI)
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"] # Проверка статуса RabbitMQ
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s # Уменьшено, но оставлено достаточно времени для старта
    restart: always

volumes:
  db_data: {}
  rabbitmq_data: {} # Volume для RabbitMQ

networks:
  app-network:
    driver: bridge